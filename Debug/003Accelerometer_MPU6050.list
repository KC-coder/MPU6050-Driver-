
003Accelerometer_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b34  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001cdc  08001cdc  00011cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cf4  08001cf4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001cf4  08001cf4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cf4  08001cf4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cf4  08001cf4  00011cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cf8  08001cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000018  08001d14  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001d14  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005168  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000afb  00000000  00000000  000251ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000570  00000000  00000000  00025cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006b2d  00000000  00000000  00026860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000031ca  00000000  00000000  0002d38d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012aef  00000000  00000000  00030557  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00043046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001608  00000000  00000000  000430c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001cc4 	.word	0x08001cc4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08001cc4 	.word	0x08001cc4

080001e8 <Delay>:

static void Delay(uint8_t value , uint8_t MicroOrMilli);


static void Delay(uint8_t value , uint8_t MicroOrMilli)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	460a      	mov	r2, r1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	4613      	mov	r3, r2
 80001f6:	71bb      	strb	r3, [r7, #6]

	//FOR SOFTWARE BASED DELAY
	if( MicroOrMilli == MICRO_SECONDS)
 80001f8:	79bb      	ldrb	r3, [r7, #6]
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d10a      	bne.n	8000214 <Delay+0x2c>
	{
		for(uint32_t i=0 ; i < (value * 1); i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e002      	b.n	800020a <Delay+0x22>
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	429a      	cmp	r2, r3
 8000210:	d3f8      	bcc.n	8000204 <Delay+0x1c>

	 while(! (LCD16x02_DELAY_TIMER->SR & (1 << TIMx_SR_UIF) ));

	 LCD16x02_DELAY_TIMER->SR &= ~(1 << TIMx_SR_UIF);*/

}
 8000212:	e00e      	b.n	8000232 <Delay+0x4a>
		for(uint32_t i=0 ; i < (value * 1000); i++);
 8000214:	2300      	movs	r3, #0
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	e002      	b.n	8000220 <Delay+0x38>
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	3301      	adds	r3, #1
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000226:	fb02 f303 	mul.w	r3, r2, r3
 800022a:	461a      	mov	r2, r3
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	4293      	cmp	r3, r2
 8000230:	d3f3      	bcc.n	800021a <Delay+0x32>
}
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <lcd16x02_int>:
 * explore these things
 * 	Cursor or Display Shift instruction (pg:27 )
 *
 */
void lcd16x02_int(LCD_config_t *pLCD)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	//delay of 40ms
	Delay(50, MILLI_SECONDS);
 8000248:	2103      	movs	r1, #3
 800024a:	2032      	movs	r0, #50	; 0x32
 800024c:	f7ff ffcc 	bl	80001e8 <Delay>

	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.RSpin, GPIO_PIN_RESET);
 8000250:	4b45      	ldr	r3, [pc, #276]	; (8000368 <lcd16x02_int+0x128>)
 8000252:	68d8      	ldr	r0, [r3, #12]
 8000254:	4b44      	ldr	r3, [pc, #272]	; (8000368 <lcd16x02_int+0x128>)
 8000256:	7a1b      	ldrb	r3, [r3, #8]
 8000258:	2200      	movs	r2, #0
 800025a:	4619      	mov	r1, r3
 800025c:	f001 fce8 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_RWpin, pinDetails.RWpin, GPIO_PIN_RESET);
 8000260:	4b41      	ldr	r3, [pc, #260]	; (8000368 <lcd16x02_int+0x128>)
 8000262:	6858      	ldr	r0, [r3, #4]
 8000264:	4b40      	ldr	r3, [pc, #256]	; (8000368 <lcd16x02_int+0x128>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2200      	movs	r2, #0
 800026a:	4619      	mov	r1, r3
 800026c:	f001 fce0 	bl	8001c30 <GPIO_WriteToOutputPin>

	//wait for 40ms before starting as per datasheet


	write8_Bits(0X30);
 8000270:	2030      	movs	r0, #48	; 0x30
 8000272:	f000 f963 	bl	800053c <write8_Bits>
	//delay of 4.1ms
	Delay(6, MILLI_SECONDS);
 8000276:	2103      	movs	r1, #3
 8000278:	2006      	movs	r0, #6
 800027a:	f7ff ffb5 	bl	80001e8 <Delay>

	write8_Bits(0X30);
 800027e:	2030      	movs	r0, #48	; 0x30
 8000280:	f000 f95c 	bl	800053c <write8_Bits>

	//delay for more than 100us
	Delay(150, MICRO_SECONDS);
 8000284:	2102      	movs	r1, #2
 8000286:	2096      	movs	r0, #150	; 0x96
 8000288:	f7ff ffae 	bl	80001e8 <Delay>

	write8_Bits(0X30);
 800028c:	2030      	movs	r0, #48	; 0x30
 800028e:	f000 f955 	bl	800053c <write8_Bits>

//===================================================================

		//configuring for function set command

		FunctionSet_val |= (pLCD->LCD_mode << 4);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	011b      	lsls	r3, r3, #4
 8000298:	b25a      	sxtb	r2, r3
 800029a:	4b34      	ldr	r3, [pc, #208]	; (800036c <lcd16x02_int+0x12c>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <lcd16x02_int+0x12c>)
 80002a8:	701a      	strb	r2, [r3, #0]
		FunctionSet_val |= (pLCD->LCD_font << 2);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	785b      	ldrb	r3, [r3, #1]
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	b25a      	sxtb	r2, r3
 80002b2:	4b2e      	ldr	r3, [pc, #184]	; (800036c <lcd16x02_int+0x12c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b2b      	ldr	r3, [pc, #172]	; (800036c <lcd16x02_int+0x12c>)
 80002c0:	701a      	strb	r2, [r3, #0]
		FunctionSet_val |= (pLCD->LCD_Lines << 3);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	b25a      	sxtb	r2, r3
 80002ca:	4b28      	ldr	r3, [pc, #160]	; (800036c <lcd16x02_int+0x12c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b25b      	sxtb	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b25      	ldr	r3, [pc, #148]	; (800036c <lcd16x02_int+0x12c>)
 80002d8:	701a      	strb	r2, [r3, #0]
		//NOTE : The number of display lines and character font cannot be changed after this point.

		lcd16x02_send_cmd( LCD16x02_FUNCTION_SET_CMD | FunctionSet_val);
 80002da:	4b24      	ldr	r3, [pc, #144]	; (800036c <lcd16x02_int+0x12c>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f8eb 	bl	80004c0 <lcd16x02_send_cmd>
		//display on/off control command

		DisplayControl_val |=(1 << 2); // display on
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <lcd16x02_int+0x130>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <lcd16x02_int+0x130>)
 80002f6:	701a      	strb	r2, [r3, #0]
		DisplayControl_val |=(pLCD->LCD_cursor << 1);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	789b      	ldrb	r3, [r3, #2]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	b25a      	sxtb	r2, r3
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <lcd16x02_int+0x130>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b25b      	sxtb	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b25b      	sxtb	r3, r3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <lcd16x02_int+0x130>)
 800030e:	701a      	strb	r2, [r3, #0]
		DisplayControl_val |=(pLCD->Blinking << 0);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795a      	ldrb	r2, [r3, #5]
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <lcd16x02_int+0x130>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4313      	orrs	r3, r2
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b14      	ldr	r3, [pc, #80]	; (8000370 <lcd16x02_int+0x130>)
 800031e:	701a      	strb	r2, [r3, #0]

		lcd16x02_send_cmd(DisplayControl_val | LCD16x02_DISPLAY_ONOFF_CMD );
 8000320:	4b13      	ldr	r3, [pc, #76]	; (8000370 <lcd16x02_int+0x130>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	f043 0308 	orr.w	r3, r3, #8
 8000328:	b2db      	uxtb	r3, r3
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f8c8 	bl	80004c0 <lcd16x02_send_cmd>

		//display clear command
		lcd16x02_send_cmd(LCD16x02_CLEAR_CMD);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 f8c5 	bl	80004c0 <lcd16x02_send_cmd>


		//entry mode command
		EntryMode_val |= (pLCD->IncOrDri << 1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	79db      	ldrb	r3, [r3, #7]
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	b25a      	sxtb	r2, r3
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <lcd16x02_int+0x134>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b25b      	sxtb	r3, r3
 8000344:	4313      	orrs	r3, r2
 8000346:	b25b      	sxtb	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <lcd16x02_int+0x134>)
 800034c:	701a      	strb	r2, [r3, #0]

		lcd16x02_send_cmd(EntryMode_val | LCD16x02_ENTRYMODE_SET_CMD);
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <lcd16x02_int+0x134>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8b1 	bl	80004c0 <lcd16x02_send_cmd>
		//initialization ends now

		//=========================================================================

}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000038 	.word	0x20000038
 800036c:	20000036 	.word	0x20000036
 8000370:	20000035 	.word	0x20000035
 8000374:	20000034 	.word	0x20000034

08000378 <lcd16x02_blink_off>:
{
	DisplayControl_val |= (1 << 0);
	lcd16x02_send_cmd(LCD16x02_DISPLAY_ONOFF_CMD | DisplayControl_val );
}
void lcd16x02_blink_off()
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	DisplayControl_val &= ~(1 << 0);
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <lcd16x02_blink_off+0x28>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	f023 0301 	bic.w	r3, r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <lcd16x02_blink_off+0x28>)
 8000388:	701a      	strb	r2, [r3, #0]
	lcd16x02_send_cmd(LCD16x02_DISPLAY_ONOFF_CMD | DisplayControl_val );
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <lcd16x02_blink_off+0x28>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	b2db      	uxtb	r3, r3
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f893 	bl	80004c0 <lcd16x02_send_cmd>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000035 	.word	0x20000035

080003a4 <lcd16x02_cursor_off>:
{
	DisplayControl_val |= (1 << 1);
	lcd16x02_send_cmd(LCD16x02_DISPLAY_ONOFF_CMD | DisplayControl_val );
}
void lcd16x02_cursor_off()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	DisplayControl_val &= ~(1 << 1);
 80003a8:	4b08      	ldr	r3, [pc, #32]	; (80003cc <lcd16x02_cursor_off+0x28>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	f023 0302 	bic.w	r3, r3, #2
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <lcd16x02_cursor_off+0x28>)
 80003b4:	701a      	strb	r2, [r3, #0]
	lcd16x02_send_cmd(LCD16x02_DISPLAY_ONOFF_CMD | DisplayControl_val );
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <lcd16x02_cursor_off+0x28>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f87d 	bl	80004c0 <lcd16x02_send_cmd>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000035 	.word	0x20000035

080003d0 <lcd16x02_write_char>:




void lcd16x02_write_char(uint8_t charater)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.RSpin, GPIO_PIN_SET);
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <lcd16x02_write_char+0x3c>)
 80003dc:	68d8      	ldr	r0, [r3, #12]
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <lcd16x02_write_char+0x3c>)
 80003e0:	7a1b      	ldrb	r3, [r3, #8]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	f001 fc23 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_RWpin, pinDetails.RWpin, GPIO_PIN_RESET);
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <lcd16x02_write_char+0x3c>)
 80003ec:	6858      	ldr	r0, [r3, #4]
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <lcd16x02_write_char+0x3c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2200      	movs	r2, #0
 80003f4:	4619      	mov	r1, r3
 80003f6:	f001 fc1b 	bl	8001c30 <GPIO_WriteToOutputPin>
	#if LCD16x02_MODE_4BIT
		write4_Bits(charater >> 4 );
		write4_Bits(charater & 0x0F);
	#else
		write8_Bits(charater);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f89d 	bl	800053c <write8_Bits>
	#endif
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000038 	.word	0x20000038

08000410 <lcd16x02_write_string>:
void lcd16x02_write_string(char *message)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.RSpin, GPIO_PIN_SET);
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <lcd16x02_write_string+0x48>)
 800041a:	68d8      	ldr	r0, [r3, #12]
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <lcd16x02_write_string+0x48>)
 800041e:	7a1b      	ldrb	r3, [r3, #8]
 8000420:	2201      	movs	r2, #1
 8000422:	4619      	mov	r1, r3
 8000424:	f001 fc04 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_RWpin, pinDetails.RWpin, GPIO_PIN_RESET);
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <lcd16x02_write_string+0x48>)
 800042a:	6858      	ldr	r0, [r3, #4]
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <lcd16x02_write_string+0x48>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2200      	movs	r2, #0
 8000432:	4619      	mov	r1, r3
 8000434:	f001 fbfc 	bl	8001c30 <GPIO_WriteToOutputPin>
	{
		#if LCD16x02_MODE_4BIT
			write4_Bits((uint8_t ) *message >> 4 );
			write4_Bits((uint8_t ) *message & 0x0F);
		#else
			write8_Bits((uint8_t ) *message ) ;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f87d 	bl	800053c <write8_Bits>
		#endif

			++message ;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	607b      	str	r3, [r7, #4]

	}while(*message != '\0');
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1f3      	bne.n	8000438 <lcd16x02_write_string+0x28>

}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000038 	.word	0x20000038

0800045c <lcd16x02_clear>:


void lcd16x02_clear()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

	lcd16x02_send_cmd(LCD16x02_CLEAR_CMD);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 f82d 	bl	80004c0 <lcd16x02_send_cmd>

	Delay(3, MILLI_SECONDS);
 8000466:	2103      	movs	r1, #3
 8000468:	2003      	movs	r0, #3
 800046a:	f7ff febd 	bl	80001e8 <Delay>
	//delay 2 milli seconds


}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}

08000472 <lcd16x02_setCursor>:

void lcd16x02_setCursor(uint8_t row , uint8_t column)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	4603      	mov	r3, r0
 800047a:	460a      	mov	r2, r1
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	4613      	mov	r3, r2
 8000480:	71bb      	strb	r3, [r7, #6]
	//user writes column form 1 to 16 but the address of column
	// is from 00 to 0F
	column-- ;
 8000482:	79bb      	ldrb	r3, [r7, #6]
 8000484:	3b01      	subs	r3, #1
 8000486:	71bb      	strb	r3, [r7, #6]
	 switch (row)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d002      	beq.n	8000494 <lcd16x02_setCursor+0x22>
 800048e:	2b02      	cmp	r3, #2
 8000490:	d009      	beq.n	80004a6 <lcd16x02_setCursor+0x34>
	   case 2:
	      /* Set cursor to 2nd row address and add index*/
		   lcd16x02_send_cmd((column |= 0xC0));
	     break;
	 }
}
 8000492:	e011      	b.n	80004b8 <lcd16x02_setCursor+0x46>
		   lcd16x02_send_cmd((column |= 0x80));
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800049a:	71bb      	strb	r3, [r7, #6]
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f80e 	bl	80004c0 <lcd16x02_send_cmd>
	    break;
 80004a4:	e008      	b.n	80004b8 <lcd16x02_setCursor+0x46>
		   lcd16x02_send_cmd((column |= 0xC0));
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80004ac:	71bb      	strb	r3, [r7, #6]
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f805 	bl	80004c0 <lcd16x02_send_cmd>
	     break;
 80004b6:	bf00      	nop
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <lcd16x02_send_cmd>:
void lcd16x02_send_cmd(uint8_t value )
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.RSpin, GPIO_PIN_RESET);
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <lcd16x02_send_cmd+0x3c>)
 80004cc:	68d8      	ldr	r0, [r3, #12]
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <lcd16x02_send_cmd+0x3c>)
 80004d0:	7a1b      	ldrb	r3, [r3, #8]
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	f001 fbab 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_RWpin, pinDetails.RWpin, GPIO_PIN_RESET);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <lcd16x02_send_cmd+0x3c>)
 80004dc:	6858      	ldr	r0, [r3, #4]
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <lcd16x02_send_cmd+0x3c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	f001 fba3 	bl	8001c30 <GPIO_WriteToOutputPin>

	#if LCD16x02_MODE_4BIT
		write4_Bits(value >> 4 );
		write4_Bits(value  & 0x0F);
	#else
		write8_Bits(value);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f825 	bl	800053c <write8_Bits>
	#endif
		//Delay(20, MICRO_SECONDS);
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000038 	.word	0x20000038

08000500 <lcd16x02_enable>:
	#endif
}


void lcd16x02_enable()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.EnablePin, GPIO_PIN_SET);
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <lcd16x02_enable+0x38>)
 8000506:	68d8      	ldr	r0, [r3, #12]
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <lcd16x02_enable+0x38>)
 800050a:	7c1b      	ldrb	r3, [r3, #16]
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f001 fb8e 	bl	8001c30 <GPIO_WriteToOutputPin>
	//delay of 10us
	Delay(10, MILLI_SECONDS);
 8000514:	2103      	movs	r1, #3
 8000516:	200a      	movs	r0, #10
 8000518:	f7ff fe66 	bl	80001e8 <Delay>
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.EnablePin, GPIO_PIN_RESET);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <lcd16x02_enable+0x38>)
 800051e:	68d8      	ldr	r0, [r3, #12]
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <lcd16x02_enable+0x38>)
 8000522:	7c1b      	ldrb	r3, [r3, #16]
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	f001 fb82 	bl	8001c30 <GPIO_WriteToOutputPin>
	//delay of 10us
	Delay(100, MILLI_SECONDS);
 800052c:	2103      	movs	r1, #3
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f7ff fe5a 	bl	80001e8 <Delay>

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000038 	.word	0x20000038

0800053c <write8_Bits>:

	lcd16x02_enable();
}

static void write8_Bits(uint8_t value)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(pinDetails.Portfor_data0pin, pinDetails.data0pin, ((value >> 0 ) & 0x01 ));
 8000546:	4b38      	ldr	r3, [pc, #224]	; (8000628 <write8_Bits+0xec>)
 8000548:	69d8      	ldr	r0, [r3, #28]
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <write8_Bits+0xec>)
 800054c:	7e19      	ldrb	r1, [r3, #24]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 0301 	and.w	r3, r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	f001 fb6a 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data1pin, pinDetails.data1pin, ((value >> 1 ) & 0x01 ));
 800055c:	4b32      	ldr	r3, [pc, #200]	; (8000628 <write8_Bits+0xec>)
 800055e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <write8_Bits+0xec>)
 8000562:	f893 1020 	ldrb.w	r1, [r3, #32]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	085b      	lsrs	r3, r3, #1
 800056a:	b2db      	uxtb	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	f001 fb5c 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data2pin, pinDetails.data2pin, ((value >> 2 ) & 0x01 ));
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <write8_Bits+0xec>)
 800057a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <write8_Bits+0xec>)
 800057e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	089b      	lsrs	r3, r3, #2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	f001 fb4e 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data3pin, pinDetails.data3pin, ((value >> 3 ) & 0x01 ));
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <write8_Bits+0xec>)
 8000596:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <write8_Bits+0xec>)
 800059a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	f001 fb40 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data4pin, pinDetails.data4pin, ((value >> 4 ) & 0x01 ));
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <write8_Bits+0xec>)
 80005b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <write8_Bits+0xec>)
 80005b6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	091b      	lsrs	r3, r3, #4
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	461a      	mov	r2, r3
 80005c8:	f001 fb32 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data5pin, pinDetails.data5pin, ((value >> 5 ) & 0x01 ));
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <write8_Bits+0xec>)
 80005ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <write8_Bits+0xec>)
 80005d2:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	095b      	lsrs	r3, r3, #5
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	f001 fb24 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data6pin, pinDetails.data6pin, ((value >> 6 ) & 0x01 ));
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <write8_Bits+0xec>)
 80005ea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <write8_Bits+0xec>)
 80005ee:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	099b      	lsrs	r3, r3, #6
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	461a      	mov	r2, r3
 8000600:	f001 fb16 	bl	8001c30 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pinDetails.Portfor_data7pin, pinDetails.data7pin, ((value >> 7 ) & 0x01 ));
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <write8_Bits+0xec>)
 8000606:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <write8_Bits+0xec>)
 800060a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	09db      	lsrs	r3, r3, #7
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	f001 fb0b 	bl	8001c30 <GPIO_WriteToOutputPin>

	lcd16x02_enable();
 800061a:	f7ff ff71 	bl	8000500 <lcd16x02_enable>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000038 	.word	0x20000038

0800062c <lcd16x02_RS_pin>:
 * Functions to configure the GPIOs
 */

//functions to configure  the pins of our LCD16x02
void lcd16x02_RS_pin(GPIO_RegDef_t *gpioPort , uint8_t gpioPin)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800063c:	2301      	movs	r3, #1
 800063e:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000640:	2300      	movs	r3, #0
 8000642:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = gpioPin;
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000648:	2300      	movs	r3, #0
 800064a:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f001 f85c 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f927 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_RSpin = gpioPort;
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <lcd16x02_RS_pin+0x58>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60d3      	str	r3, [r2, #12]
	pinDetails.RSpin = gpioPin;
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <lcd16x02_RS_pin+0x58>)
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	7213      	strb	r3, [r2, #8]
	GPIO_WriteToOutputPin(pinDetails.Portfor_RSpin, pinDetails.RSpin, GPIO_PIN_RESET);
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <lcd16x02_RS_pin+0x58>)
 800066c:	68d8      	ldr	r0, [r3, #12]
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <lcd16x02_RS_pin+0x58>)
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f001 fadb 	bl	8001c30 <GPIO_WriteToOutputPin>



}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000038 	.word	0x20000038

08000688 <lcd16x02_RW_pin>:
void lcd16x02_RW_pin(GPIO_RegDef_t *gpioPort , uint8_t gpioPin)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000698:	2301      	movs	r3, #1
 800069a:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800069c:	2300      	movs	r3, #0
 800069e:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = gpioPin;
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80006a4:	2300      	movs	r3, #0
 80006a6:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 80006a8:	2101      	movs	r1, #1
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f001 f82e 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f8f9 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_RWpin = gpioPort;
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <lcd16x02_RW_pin+0x58>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6053      	str	r3, [r2, #4]
	pinDetails.RWpin = gpioPin;
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <lcd16x02_RW_pin+0x58>)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	7013      	strb	r3, [r2, #0]
	GPIO_WriteToOutputPin(pinDetails.Portfor_RWpin, pinDetails.RWpin, GPIO_PIN_RESET);
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <lcd16x02_RW_pin+0x58>)
 80006c8:	6858      	ldr	r0, [r3, #4]
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <lcd16x02_RW_pin+0x58>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 faad 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000038 	.word	0x20000038

080006e4 <lcd16x02_Enable_pin>:
void lcd16x02_Enable_pin(GPIO_RegDef_t *gpioPort , uint8_t gpioPin)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80006f4:	2301      	movs	r3, #1
 80006f6:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80006f8:	2300      	movs	r3, #0
 80006fa:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = gpioPin;
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000700:	2300      	movs	r3, #0
 8000702:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 8000704:	2101      	movs	r1, #1
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f001 f800 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f8cb 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_EnablePin = gpioPort;
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <lcd16x02_Enable_pin+0x58>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6153      	str	r3, [r2, #20]
	pinDetails.EnablePin = gpioPin;
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <lcd16x02_Enable_pin+0x58>)
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	7413      	strb	r3, [r2, #16]

	GPIO_WriteToOutputPin(pinDetails.Portfor_EnablePin, pinDetails.EnablePin, GPIO_PIN_RESET);
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <lcd16x02_Enable_pin+0x58>)
 8000724:	6958      	ldr	r0, [r3, #20]
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <lcd16x02_Enable_pin+0x58>)
 8000728:	7c1b      	ldrb	r3, [r3, #16]
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	f001 fa7f 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000038 	.word	0x20000038

08000740 <lcd16x02_Data_pin0>:

void lcd16x02_Data_pin0 (GPIO_RegDef_t *gpioPort , uint8_t datapin0 )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000750:	2301      	movs	r3, #1
 8000752:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000754:	2300      	movs	r3, #0
 8000756:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin0;
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800075c:	2300      	movs	r3, #0
 800075e:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 8000760:	2101      	movs	r1, #1
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 ffd2 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f89d 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data0pin = gpioPort;
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <lcd16x02_Data_pin0+0x58>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	61d3      	str	r3, [r2, #28]
	pinDetails.data0pin = datapin0;
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <lcd16x02_Data_pin0+0x58>)
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	7613      	strb	r3, [r2, #24]
	GPIO_WriteToOutputPin(pinDetails.Portfor_data0pin, pinDetails.data0pin, GPIO_PIN_RESET);
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <lcd16x02_Data_pin0+0x58>)
 8000780:	69d8      	ldr	r0, [r3, #28]
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <lcd16x02_Data_pin0+0x58>)
 8000784:	7e1b      	ldrb	r3, [r3, #24]
 8000786:	2200      	movs	r2, #0
 8000788:	4619      	mov	r1, r3
 800078a:	f001 fa51 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000038 	.word	0x20000038

0800079c <lcd16x02_Data_pin1>:
void lcd16x02_Data_pin1 (GPIO_RegDef_t *gpioPort , uint8_t datapin1 )
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007ac:	2301      	movs	r3, #1
 80007ae:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80007b0:	2300      	movs	r3, #0
 80007b2:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin1;
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80007b8:	2300      	movs	r3, #0
 80007ba:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 80007bc:	2101      	movs	r1, #1
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 ffa4 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f86f 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data1pin = gpioPort;
 80007ce:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <lcd16x02_Data_pin1+0x5c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6253      	str	r3, [r2, #36]	; 0x24
	pinDetails.data1pin = datapin1;
 80007d4:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <lcd16x02_Data_pin1+0x5c>)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	f882 3020 	strb.w	r3, [r2, #32]
	GPIO_WriteToOutputPin(pinDetails.Portfor_data1pin, pinDetails.data1pin, GPIO_PIN_RESET);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <lcd16x02_Data_pin1+0x5c>)
 80007de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <lcd16x02_Data_pin1+0x5c>)
 80007e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007e6:	2200      	movs	r2, #0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f001 fa21 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000038 	.word	0x20000038

080007fc <lcd16x02_Data_pin2>:
void lcd16x02_Data_pin2 (GPIO_RegDef_t *gpioPort , uint8_t datapin2 )
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800080c:	2301      	movs	r3, #1
 800080e:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000810:	2300      	movs	r3, #0
 8000812:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin2;
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000818:	2300      	movs	r3, #0
 800081a:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 ff74 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4618      	mov	r0, r3
 800082a:	f001 f83f 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data2pin = gpioPort;
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <lcd16x02_Data_pin2+0x5c>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	62d3      	str	r3, [r2, #44]	; 0x2c
	pinDetails.data2pin = datapin2;
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <lcd16x02_Data_pin2+0x5c>)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	GPIO_WriteToOutputPin(pinDetails.Portfor_data2pin, pinDetails.data2pin, GPIO_PIN_RESET);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <lcd16x02_Data_pin2+0x5c>)
 800083e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <lcd16x02_Data_pin2+0x5c>)
 8000842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	f001 f9f1 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000038 	.word	0x20000038

0800085c <lcd16x02_Data_pin3>:
void lcd16x02_Data_pin3 (GPIO_RegDef_t *gpioPort , uint8_t datapin3 )
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800086c:	2301      	movs	r3, #1
 800086e:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000870:	2300      	movs	r3, #0
 8000872:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin3;
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000878:	2300      	movs	r3, #0
 800087a:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 800087c:	2101      	movs	r1, #1
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 ff44 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f80f 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data3pin = gpioPort;
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <lcd16x02_Data_pin3+0x5c>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6353      	str	r3, [r2, #52]	; 0x34
	pinDetails.data3pin = datapin3;
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <lcd16x02_Data_pin3+0x5c>)
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	GPIO_WriteToOutputPin(pinDetails.Portfor_data3pin, pinDetails.data3pin, GPIO_PIN_RESET);
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <lcd16x02_Data_pin3+0x5c>)
 800089e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <lcd16x02_Data_pin3+0x5c>)
 80008a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80008a6:	2200      	movs	r2, #0
 80008a8:	4619      	mov	r1, r3
 80008aa:	f001 f9c1 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000038 	.word	0x20000038

080008bc <lcd16x02_Data_pin4>:
void lcd16x02_Data_pin4 (GPIO_RegDef_t *gpioPort , uint8_t datapin4 )
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008cc:	2301      	movs	r3, #1
 80008ce:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80008d0:	2300      	movs	r3, #0
 80008d2:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin4;
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80008d8:	2300      	movs	r3, #0
 80008da:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 80008dc:	2101      	movs	r1, #1
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 ff14 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 ffdf 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data4pin = gpioPort;
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <lcd16x02_Data_pin4+0x5c>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	63d3      	str	r3, [r2, #60]	; 0x3c
	pinDetails.data4pin = datapin4;
 80008f4:	4a08      	ldr	r2, [pc, #32]	; (8000918 <lcd16x02_Data_pin4+0x5c>)
 80008f6:	78fb      	ldrb	r3, [r7, #3]
 80008f8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	GPIO_WriteToOutputPin(pinDetails.Portfor_data4pin, pinDetails.data4pin, GPIO_PIN_RESET);
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <lcd16x02_Data_pin4+0x5c>)
 80008fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <lcd16x02_Data_pin4+0x5c>)
 8000902:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	f001 f991 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000038 	.word	0x20000038

0800091c <lcd16x02_Data_pin5>:
void lcd16x02_Data_pin5 (GPIO_RegDef_t *gpioPort , uint8_t datapin5 )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800092c:	2301      	movs	r3, #1
 800092e:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000930:	2300      	movs	r3, #0
 8000932:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin5;
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000938:	2300      	movs	r3, #0
 800093a:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 800093c:	2101      	movs	r1, #1
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fee4 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4618      	mov	r0, r3
 800094a:	f000 ffaf 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data5pin = gpioPort;
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <lcd16x02_Data_pin5+0x5c>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6453      	str	r3, [r2, #68]	; 0x44
	pinDetails.data5pin = datapin5;
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <lcd16x02_Data_pin5+0x5c>)
 8000956:	78fb      	ldrb	r3, [r7, #3]
 8000958:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
	GPIO_WriteToOutputPin(pinDetails.Portfor_data5pin, pinDetails.data5pin, GPIO_PIN_RESET);
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <lcd16x02_Data_pin5+0x5c>)
 800095e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <lcd16x02_Data_pin5+0x5c>)
 8000962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	f001 f961 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000038 	.word	0x20000038

0800097c <lcd16x02_Data_pin6>:
void lcd16x02_Data_pin6 (GPIO_RegDef_t *gpioPort , uint8_t datapin6 )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800098c:	2301      	movs	r3, #1
 800098e:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000990:	2300      	movs	r3, #0
 8000992:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin6;
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000998:	2300      	movs	r3, #0
 800099a:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 800099c:	2101      	movs	r1, #1
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 feb4 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ff7f 	bl	80018ac <GPIO_Init>

	pinDetails.Portfor_data6pin = gpioPort;
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <lcd16x02_Data_pin6+0x5c>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
	pinDetails.data6pin = datapin6;
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <lcd16x02_Data_pin6+0x5c>)
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
	GPIO_WriteToOutputPin(pinDetails.Portfor_data6pin, pinDetails.data6pin, GPIO_PIN_RESET);
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <lcd16x02_Data_pin6+0x5c>)
 80009be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <lcd16x02_Data_pin6+0x5c>)
 80009c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f001 f931 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000038 	.word	0x20000038

080009dc <lcd16x02_Data_pin7>:
void lcd16x02_Data_pin7 (GPIO_RegDef_t *gpioPort , uint8_t datapin7 )
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t pin;
	pin.pGPIOx = gpioPort;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
	pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009ec:	2301      	movs	r3, #1
 80009ee:	747b      	strb	r3, [r7, #17]
	pin.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009f0:	2300      	movs	r3, #0
 80009f2:	753b      	strb	r3, [r7, #20]
	pin.GPIO_PinConfig.GPIO_PinNumber = datapin7;
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	743b      	strb	r3, [r7, #16]
	pin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009f8:	2300      	movs	r3, #0
 80009fa:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(gpioPort, ENABLE);
 80009fc:	2101      	movs	r1, #1
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 fe84 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&pin);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 ff4f 	bl	80018ac <GPIO_Init>
	pinDetails.Portfor_data7pin = gpioPort;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <lcd16x02_Data_pin7+0x5c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6553      	str	r3, [r2, #84]	; 0x54
	pinDetails.data7pin = datapin7;
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <lcd16x02_Data_pin7+0x5c>)
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50

	GPIO_WriteToOutputPin(pinDetails.Portfor_data7pin, pinDetails.data7pin, GPIO_PIN_RESET);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <lcd16x02_Data_pin7+0x5c>)
 8000a1e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <lcd16x02_Data_pin7+0x5c>)
 8000a22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f001 f901 	bl	8001c30 <GPIO_WriteToOutputPin>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000038 	.word	0x20000038

08000a3c <main>:
#include "MPU6050_Driver.h"
#include "stm32F407xx_I2C_driver.h"
#include "stm32F407xx_gpio_driver.h"
#include "lcd.h"
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0
	//6. display the value of the acclerometer

	//PB6: SCL AF4 I2C1
	//PB7: SDA AF4 I2C2

	lcd16x02_RW_pin(GPIOD, GPIO_PIN_1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	486f      	ldr	r0, [pc, #444]	; (8000c04 <main+0x1c8>)
 8000a46:	f7ff fe1f 	bl	8000688 <lcd16x02_RW_pin>
	lcd16x02_RS_pin(GPIOD, GPIO_PIN_0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	486d      	ldr	r0, [pc, #436]	; (8000c04 <main+0x1c8>)
 8000a4e:	f7ff fded 	bl	800062c <lcd16x02_RS_pin>
	lcd16x02_Enable_pin(GPIOD, GPIO_PIN_2);
 8000a52:	2102      	movs	r1, #2
 8000a54:	486b      	ldr	r0, [pc, #428]	; (8000c04 <main+0x1c8>)
 8000a56:	f7ff fe45 	bl	80006e4 <lcd16x02_Enable_pin>

	lcd16x02_Data_pin0(GPIOE, GPIO_PIN_11);
 8000a5a:	210b      	movs	r1, #11
 8000a5c:	486a      	ldr	r0, [pc, #424]	; (8000c08 <main+0x1cc>)
 8000a5e:	f7ff fe6f 	bl	8000740 <lcd16x02_Data_pin0>
	lcd16x02_Data_pin1(GPIOE, GPIO_PIN_12);
 8000a62:	210c      	movs	r1, #12
 8000a64:	4868      	ldr	r0, [pc, #416]	; (8000c08 <main+0x1cc>)
 8000a66:	f7ff fe99 	bl	800079c <lcd16x02_Data_pin1>
	lcd16x02_Data_pin2(GPIOE, GPIO_PIN_13);
 8000a6a:	210d      	movs	r1, #13
 8000a6c:	4866      	ldr	r0, [pc, #408]	; (8000c08 <main+0x1cc>)
 8000a6e:	f7ff fec5 	bl	80007fc <lcd16x02_Data_pin2>
	lcd16x02_Data_pin3(GPIOE, GPIO_PIN_14);
 8000a72:	210e      	movs	r1, #14
 8000a74:	4864      	ldr	r0, [pc, #400]	; (8000c08 <main+0x1cc>)
 8000a76:	f7ff fef1 	bl	800085c <lcd16x02_Data_pin3>

	lcd16x02_Data_pin4(GPIOD, GPIO_PIN_3);
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	4861      	ldr	r0, [pc, #388]	; (8000c04 <main+0x1c8>)
 8000a7e:	f7ff ff1d 	bl	80008bc <lcd16x02_Data_pin4>
	lcd16x02_Data_pin5(GPIOD, GPIO_PIN_4);
 8000a82:	2104      	movs	r1, #4
 8000a84:	485f      	ldr	r0, [pc, #380]	; (8000c04 <main+0x1c8>)
 8000a86:	f7ff ff49 	bl	800091c <lcd16x02_Data_pin5>
	lcd16x02_Data_pin6(GPIOD, GPIO_PIN_5);
 8000a8a:	2105      	movs	r1, #5
 8000a8c:	485d      	ldr	r0, [pc, #372]	; (8000c04 <main+0x1c8>)
 8000a8e:	f7ff ff75 	bl	800097c <lcd16x02_Data_pin6>
	lcd16x02_Data_pin7(GPIOD, GPIO_PIN_6);
 8000a92:	2106      	movs	r1, #6
 8000a94:	485b      	ldr	r0, [pc, #364]	; (8000c04 <main+0x1c8>)
 8000a96:	f7ff ffa1 	bl	80009dc <lcd16x02_Data_pin7>

	LCD_config_t LCD_int;

	LCD_int.Blinking = LCD16x02_CURSOR_BLINK_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	LCD_int.IncOrDri = LCD16x02_INCREMENT_ADDRESS;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	LCD_int.LCD_Lines = LCD16x02_2LIN_MODE;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	LCD_int.LCD_cursor = LCD16x02_CURSOR_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	LCD_int.LCD_font = LCD16x02_FONT_5x8D;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	//LCD_int.LCD_mode = LCD16x02_MODE_4BITS;
	LCD_int.LCD_mode = LCD16x02_MODE_8BITS;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	LCD_int.display = LCD16x02_DISPLAY_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	lcd16x02_int(&LCD_int);
 8000ac4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fbb9 	bl	8000240 <lcd16x02_int>
	lcd16x02_clear();
 8000ace:	f7ff fcc5 	bl	800045c <lcd16x02_clear>
	lcd16x02_setCursor(1, 4);
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fccc 	bl	8000472 <lcd16x02_setCursor>

	lcd16x02_write_string("Hello World");
 8000ada:	484c      	ldr	r0, [pc, #304]	; (8000c0c <main+0x1d0>)
 8000adc:	f7ff fc98 	bl	8000410 <lcd16x02_write_string>

	lcd16x02_setCursor(2, 1);
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fcc5 	bl	8000472 <lcd16x02_setCursor>
	lcd16x02_write_string("Hi!! KAMAL ");
 8000ae8:	4849      	ldr	r0, [pc, #292]	; (8000c10 <main+0x1d4>)
 8000aea:	f7ff fc91 	bl	8000410 <lcd16x02_write_string>
	lcd16x02_write_char(68);
 8000aee:	2044      	movs	r0, #68	; 0x44
 8000af0:	f7ff fc6e 	bl	80003d0 <lcd16x02_write_char>

	lcd16x02_blink_off();
 8000af4:	f7ff fc40 	bl	8000378 <lcd16x02_blink_off>
	lcd16x02_cursor_off();
 8000af8:	f7ff fc54 	bl	80003a4 <lcd16x02_cursor_off>


	//=======================================================

	I2C_Handle_t i2cForMPU60x0 ;
	i2cForMPU60x0.pI2Cx = I2C1;
 8000afc:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <main+0x1d8>)
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
	i2cForMPU60x0.I2C_Config.I2C_AckControl = ENABLE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	i2cForMPU60x0.I2C_Config.I2C_DeviceAddress = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	i2cForMPU60x0.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	i2cForMPU60x0.I2C_Config.I2C_SCLSpeed = 100000;
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <main+0x1dc>)
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	i2cForMPU60x0.I2C_Config.slaveADDRmode = I2C_SLAVE_ADDR_MODE_7BITS;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	I2C_PeriClockControl(I2C1, ENABLE);
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	483d      	ldr	r0, [pc, #244]	; (8000c14 <main+0x1d8>)
 8000b20:	f000 fa12 	bl	8000f48 <I2C_PeriClockControl>
	I2C_Init(&i2cForMPU60x0);
 8000b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fa65 	bl	8000ff8 <I2C_Init>
	System_I2C_ForMPU = &i2cForMPU60x0;
 8000b2e:	4a3b      	ldr	r2, [pc, #236]	; (8000c1c <main+0x1e0>)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	6013      	str	r3, [r2, #0]

	GPIO_Handle_t gpioForMPU;
	gpioForMPU.pGPIOx = GPIOB;
 8000b36:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <main+0x1e4>)
 8000b38:	61fb      	str	r3, [r7, #28]
	gpioForMPU.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUN;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	gpioForMPU.GPIO_PinConfig.GPIO_PinAlFunMode = 4 ;
 8000b40:	2304      	movs	r3, #4
 8000b42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	gpioForMPU.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	gpioForMPU.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	gpioForMPU.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b52:	2302      	movs	r3, #2
 8000b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	gpioForMPU.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6; // for I2C1 SCl
 8000b58:	2306      	movs	r3, #6
 8000b5a:	f887 3020 	strb.w	r3, [r7, #32]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000b5e:	2101      	movs	r1, #1
 8000b60:	482f      	ldr	r0, [pc, #188]	; (8000c20 <main+0x1e4>)
 8000b62:	f000 fdd3 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&gpioForMPU);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fe9e 	bl	80018ac <GPIO_Init>

	gpioForMPU.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7; //for I2C1 SDA
 8000b70:	2307      	movs	r3, #7
 8000b72:	f887 3020 	strb.w	r3, [r7, #32]

	GPIO_Init(&gpioForMPU);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fe96 	bl	80018ac <GPIO_Init>


	GPIO_Handle_t GpioAbtn;
	GpioAbtn.pGPIOx = GPIOA;
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <main+0x1e8>)
 8000b82:	613b      	str	r3, [r7, #16]
	GpioAbtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	753b      	strb	r3, [r7, #20]
	GpioAbtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	757b      	strb	r3, [r7, #21]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4825      	ldr	r0, [pc, #148]	; (8000c24 <main+0x1e8>)
 8000b90:	f000 fdbc 	bl	800170c <GPIO_PeriClockControl>
	GPIO_Init(&GpioAbtn);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fe87 	bl	80018ac <GPIO_Init>


	MPU6050_AccelHandle_Struct_t AccelConfig ;
	AccelConfig.DLF_Val = 1 ;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	733b      	strb	r3, [r7, #12]
	AccelConfig.FIFO_EnOrDi = DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73bb      	strb	r3, [r7, #14]
	AccelConfig.FS_Val = MPU6050_ACCEL_FS_4	 ;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	737b      	strb	r3, [r7, #13]
	AccelConfig.Motion_thershold = 20;
 8000baa:	2314      	movs	r3, #20
 8000bac:	73fb      	strb	r3, [r7, #15]
	MPU6050_Set_ADDR(0x68);
 8000bae:	2068      	movs	r0, #104	; 0x68
 8000bb0:	f000 f83a 	bl	8000c28 <MPU6050_Set_ADDR>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <main+0x1d8>)
 8000bb8:	f000 f9a9 	bl	8000f0e <I2C_PeripheralControl>

	MPU6050_Sleep_disable();
 8000bbc:	f000 f844 	bl	8000c48 <MPU6050_Sleep_disable>
	lcd16x02_clear();
 8000bc0:	f7ff fc4c 	bl	800045c <lcd16x02_clear>


	MPU6050_Accel_Config(&AccelConfig);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f86b 	bl	8000ca4 <MPU6050_Accel_Config>

	uint16_t Xaccel , Yaccel , Zaccel;
	while(1)
	{
		MPU6050_Get_AccelData(&Xaccel, &Yaccel, &Zaccel);
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	f107 0108 	add.w	r1, r7, #8
 8000bd4:	f107 030a 	add.w	r3, r7, #10
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f89b 	bl	8000d14 <MPU6050_Get_AccelData>

		lcd16x02_setCursor(0, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fc46 	bl	8000472 <lcd16x02_setCursor>
		lcd16x02_write_string((uint8_t)Xaccel);
 8000be6:	897b      	ldrh	r3, [r7, #10]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fc10 	bl	8000410 <lcd16x02_write_string>
		 while(! ( GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) ) );
 8000bf0:	bf00      	nop
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <main+0x1e8>)
 8000bf6:	f001 f805 	bl	8001c04 <GPIO_ReadFromInputPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f8      	beq.n	8000bf2 <main+0x1b6>
		MPU6050_Get_AccelData(&Xaccel, &Yaccel, &Zaccel);
 8000c00:	e7e5      	b.n	8000bce <main+0x192>
 8000c02:	bf00      	nop
 8000c04:	40020c00 	.word	0x40020c00
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	08001cdc 	.word	0x08001cdc
 8000c10:	08001ce8 	.word	0x08001ce8
 8000c14:	40005400 	.word	0x40005400
 8000c18:	000186a0 	.word	0x000186a0
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40020000 	.word	0x40020000

08000c28 <MPU6050_Set_ADDR>:
  * 			  he again have to call this function and supply the address of the second MPU60x0
  * 			  then call the functions needed to cofigure that MPU according to the application
  *
  *****************************************************************/
void MPU6050_Set_ADDR(uint8_t address)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	mpuADDR = address;
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <MPU6050_Set_ADDR+0x1c>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	7013      	strb	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000037 	.word	0x20000037

08000c48 <MPU6050_Sleep_disable>:
 * 			 	 when MPU6050_SLEEP_EN_BIT = 0 : Not is sleep mode
 *
 *
 *****************************************************************/
void MPU6050_Sleep_disable()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	uint8_t ToSend = 0 ;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	71fb      	strb	r3, [r7, #7]
	ToSend &= ~(1 << MPU6050_SLEEP_EN_BIT);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c58:	71fb      	strb	r3, [r7, #7]
	Write_MPU6050_I2C(mpuADDR, MPU6050_PWR_MGMT_1_REG_ADDR , ToSend);
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <MPU6050_Sleep_disable+0x28>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	216b      	movs	r1, #107	; 0x6b
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8e6 	bl	8000e34 <Write_MPU6050_I2C>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000037 	.word	0x20000037

08000c74 <MPU6050_DLPF_Config>:
 * 				  DLFP
 *
 *
 *****************************************************************/
void MPU6050_DLPF_Config(uint8_t DLPFVal)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0 ;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
		data |= (DLPFVal <<  MPU6050_CFG_DLPF_COFIG_BIT);
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	73fb      	strb	r3, [r7, #15]
		Write_MPU6050_I2C(mpuADDR, MPU6050_CONFIG_REG_ADDR, data);
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <MPU6050_DLPF_Config+0x2c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	211a      	movs	r1, #26
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f8ce 	bl	8000e34 <Write_MPU6050_I2C>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000037 	.word	0x20000037

08000ca4 <MPU6050_Accel_Config>:
 * 				- in this we configure the accelerometer as per our application requirements
 *
 *
 *****************************************************************/
void MPU6050_Accel_Config(MPU6050_AccelHandle_Struct_t *Accel_config)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	MPU6050_DLPF_Config(Accel_config->DLF_Val);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffdf 	bl	8000c74 <MPU6050_DLPF_Config>
	MPU6050_AccelFS_Config(Accel_config->FS_Val);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	785b      	ldrb	r3, [r3, #1]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f80e 	bl	8000cdc <MPU6050_AccelFS_Config>
	MPU6050_MotDet_Config(Accel_config->Motion_thershold);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	78db      	ldrb	r3, [r3, #3]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f8a3 	bl	8000e10 <MPU6050_MotDet_Config>
	MPU6050_FIFO_AccelEnOrDi(Accel_config->FIFO_EnOrDi);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f85e 	bl	8000d90 <MPU6050_FIFO_AccelEnOrDi>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MPU6050_AccelFS_Config>:
 *
 *
 *****************************************************************/

void MPU6050_AccelFS_Config(uint8_t FS_val)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	data |= (FS_val << MPU6050_ACCEL_AFS_SEL_BIT);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	b25a      	sxtb	r2, r3
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	73fb      	strb	r3, [r7, #15]
	Write_MPU6050_I2C(mpuADDR, MPU6050_ACCEL_CONFIG_REG_ADDR , data);
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MPU6050_AccelFS_Config+0x34>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	211c      	movs	r1, #28
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f896 	bl	8000e34 <Write_MPU6050_I2C>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000037 	.word	0x20000037

08000d14 <MPU6050_Get_AccelData>:
 * 				-
 *
 *****************************************************************/

void MPU6050_Get_AccelData(uint16_t *Xaccel ,uint16_t *Yaccel ,uint16_t *Zaccel)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	uint8_t data[6] ;

	Read_Multiple_MPU6050_I2C(mpuADDR, MPU6050_ACCEL_XOUT_H_REG_ADDR, data, 6);
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MPU6050_Get_AccelData+0x78>)
 8000d22:	7818      	ldrb	r0, [r3, #0]
 8000d24:	f107 0210 	add.w	r2, r7, #16
 8000d28:	2306      	movs	r3, #6
 8000d2a:	213b      	movs	r1, #59	; 0x3b
 8000d2c:	f000 f8a0 	bl	8000e70 <Read_Multiple_MPU6050_I2C>
	*Xaccel = ((uint16_t)data[0] << 8);
 8000d30:	7c3b      	ldrb	r3, [r7, #16]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	801a      	strh	r2, [r3, #0]
	*Xaccel |= data[1] ;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	881a      	ldrh	r2, [r3, #0]
 8000d40:	7c7b      	ldrb	r3, [r7, #17]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	801a      	strh	r2, [r3, #0]

	*Yaccel = ((uint16_t)data[2] << 8);
 8000d4c:	7cbb      	ldrb	r3, [r7, #18]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	801a      	strh	r2, [r3, #0]
	*Yaccel |= data[3] ;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	801a      	strh	r2, [r3, #0]

	*Zaccel = ((uint16_t)data[4] << 8);
 8000d68:	7d3b      	ldrb	r3, [r7, #20]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	801a      	strh	r2, [r3, #0]
	*Zaccel |= data[5] ;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	7d7b      	ldrb	r3, [r7, #21]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	801a      	strh	r2, [r3, #0]

}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000037 	.word	0x20000037

08000d90 <MPU6050_FIFO_AccelEnOrDi>:
 *    			  ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64)
 *    			  to be written into the FIFO buffer
 *
 *****************************************************************/
void MPU6050_FIFO_AccelEnOrDi( uint8_t EnOrDi )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0 , temp = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
	if(EnOrDi == ENABLE)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d116      	bne.n	8000dd6 <MPU6050_FIFO_AccelEnOrDi+0x46>
	{
		data |= (1 << MPU6050_ACCEL_FIFO_EN_BIT);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	73fb      	strb	r3, [r7, #15]
		Write_MPU6050_I2C(mpuADDR, MPU6050_FIFO_EN_REG_ADDR, data);
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MPU6050_FIFO_AccelEnOrDi+0x7c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	2123      	movs	r1, #35	; 0x23
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f83b 	bl	8000e34 <Write_MPU6050_I2C>
		temp |= (1 << MPU6050_FIFO_EN_BIT);
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc4:	73bb      	strb	r3, [r7, #14]
		Write_MPU6050_I2C(mpuADDR, MPU6050_USER_CTRL_REG_ADDR , temp);
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MPU6050_FIFO_AccelEnOrDi+0x7c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	7bba      	ldrb	r2, [r7, #14]
 8000dcc:	216a      	movs	r1, #106	; 0x6a
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f830 	bl	8000e34 <Write_MPU6050_I2C>
		Write_MPU6050_I2C(mpuADDR, MPU6050_FIFO_EN_REG_ADDR, data);

		temp &= ~(1 << MPU6050_FIFO_EN_BIT	 );
		Write_MPU6050_I2C(mpuADDR, MPU6050_USER_CTRL_REG_ADDR , temp);
	}
}
 8000dd4:	e015      	b.n	8000e02 <MPU6050_FIFO_AccelEnOrDi+0x72>
		data &= ~(1 << MPU6050_ACCEL_FIFO_EN_BIT);
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	f023 0308 	bic.w	r3, r3, #8
 8000ddc:	73fb      	strb	r3, [r7, #15]
		Write_MPU6050_I2C(mpuADDR, MPU6050_FIFO_EN_REG_ADDR, data);
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MPU6050_FIFO_AccelEnOrDi+0x7c>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	2123      	movs	r1, #35	; 0x23
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f824 	bl	8000e34 <Write_MPU6050_I2C>
		temp &= ~(1 << MPU6050_FIFO_EN_BIT	 );
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000df2:	73bb      	strb	r3, [r7, #14]
		Write_MPU6050_I2C(mpuADDR, MPU6050_USER_CTRL_REG_ADDR , temp);
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <MPU6050_FIFO_AccelEnOrDi+0x7c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	7bba      	ldrb	r2, [r7, #14]
 8000dfa:	216a      	movs	r1, #106	; 0x6a
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f819 	bl	8000e34 <Write_MPU6050_I2C>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000037 	.word	0x20000037

08000e10 <MPU6050_MotDet_Config>:
 * 				  detection threshold.The Motion interrupt will indicate the axis
 * 				  and polarity of detected motion in MOT_DETECT _STATUS
 *
 *****************************************************************/
void MPU6050_MotDet_Config(uint8_t thresVal)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	Write_MPU6050_I2C(mpuADDR, MPU6050_MOT_THR_REG_ADDR, thresVal);
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <MPU6050_MotDet_Config+0x20>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	211f      	movs	r1, #31
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f806 	bl	8000e34 <Write_MPU6050_I2C>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000037 	.word	0x20000037

08000e34 <Write_MPU6050_I2C>:
	I2C_MasterReceiveData(System_I2C_ForMPU, data, 1, mpuADDR, DISABLE);


}
void Write_MPU6050_I2C(uint8_t mpuADDR , uint8_t RegADDR , uint8_t data)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	717b      	strb	r3, [r7, #5]
		uint8_t buffer[2] = { RegADDR , data };
 8000e46:	79bb      	ldrb	r3, [r7, #6]
 8000e48:	733b      	strb	r3, [r7, #12]
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	737b      	strb	r3, [r7, #13]
		I2C_MasterSendData(System_I2C_ForMPU, buffer, 2, mpuADDR, DISABLE);
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <Write_MPU6050_I2C+0x38>)
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	f107 010c 	add.w	r1, r7, #12
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	2202      	movs	r2, #2
 8000e60:	f000 f9a8 	bl	80011b4 <I2C_MasterSendData>

}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000090 	.word	0x20000090

08000e70 <Read_Multiple_MPU6050_I2C>:
		I2C_MasterSendData(System_I2C_ForMPU, data,  len , mpuADDR, DISABLE);

}

void Read_Multiple_MPU6050_I2C(uint8_t mpuADDR , uint8_t RegADDR , uint8_t *data , uint8_t Len )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	603a      	str	r2, [r7, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	71bb      	strb	r3, [r7, #6]
 8000e82:	4613      	mov	r3, r2
 8000e84:	717b      	strb	r3, [r7, #5]
	I2C_MasterSendData(System_I2C_ForMPU, &RegADDR, 1, mpuADDR, ENABLE);
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <Read_Multiple_MPU6050_I2C+0x48>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	1db9      	adds	r1, r7, #6
 8000e8e:	2301      	movs	r3, #1
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	2201      	movs	r2, #1
 8000e96:	f000 f98d 	bl	80011b4 <I2C_MasterSendData>
//	for(uint32_t  i = 0 ; i < 3000 ; i ++ );
	I2C_MasterReceiveData(System_I2C_ForMPU, data, Len,mpuADDR, DISABLE);
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <Read_Multiple_MPU6050_I2C+0x48>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	79f9      	ldrb	r1, [r7, #7]
 8000ea0:	797a      	ldrb	r2, [r7, #5]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	6839      	ldr	r1, [r7, #0]
 8000eaa:	f000 f9ee 	bl	800128a <I2C_MasterReceiveData>
//	System_I2C_ForMPU->pI2Cx->CR1 &= ~(1 << I2C_CR1_STOP);
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000090 	.word	0x20000090

08000ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ec0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eea:	f000 fec7 	bl	8001c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff fda5 	bl	8000a3c <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f00:	08001cfc 	.word	0x08001cfc
  ldr r2, =_sbss
 8000f04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f08:	20000094 	.word	0x20000094

08000f0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>

08000f0e <I2C_PeripheralControl>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static  void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d106      	bne.n	8000f2e <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f043 0201 	orr.w	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000f2c:	e005      	b.n	8000f3a <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 0201 	bic.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d120      	bne.n	8000f9c <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <I2C_PeriClockControl+0xa0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d106      	bne.n	8000f70 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a21      	ldr	r2, [pc, #132]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
			I2C3_PCLK_DI();
		}

	}

}
 8000f6e:	e035      	b.n	8000fdc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <I2C_PeriClockControl+0xa8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d106      	bne.n	8000f86 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f84:	e02a      	b.n	8000fdc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <I2C_PeriClockControl+0xac>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d126      	bne.n	8000fdc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000f94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f9a:	e01f      	b.n	8000fdc <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <I2C_PeriClockControl+0xa0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d106      	bne.n	8000fb2 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a10      	ldr	r2, [pc, #64]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fb0:	e014      	b.n	8000fdc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C2)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <I2C_PeriClockControl+0xa8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d106      	bne.n	8000fc8 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000fc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fc6:	e009      	b.n	8000fdc <I2C_PeriClockControl+0x94>
		}else if (pI2Cx == I2C3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <I2C_PeriClockControl+0xac>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d105      	bne.n	8000fdc <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <I2C_PeriClockControl+0xa4>)
 8000fd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40005800 	.word	0x40005800
 8000ff4:	40005c00 	.word	0x40005c00

08000ff8 <I2C_Init>:




void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
	uint16_t temp2 = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	827b      	strh	r3, [r7, #18]
	uint16_t temp3;

	tempreg = pI2CHandle->pI2Cx->CR1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	617b      	str	r3, [r7, #20]
	//enabling ACK bit (which is kind of must in SPI)
	tempreg |= (pI2CHandle->I2C_Config.I2C_AckControl << I2C_CR1_ACK );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7a5b      	ldrb	r3, [r3, #9]
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	461a      	mov	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]


	//not configuring other cr1 bits, may be needed later
	tempreg = 0 ;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

	//divinding by 1MHZ AS we only set the final 2 or 1 digit
	tempreg = (  RCC_getPCLK1Value() / 1000000U );
 800102a:	f000 fb17 	bl	800165c <RCC_getPCLK1Value>
 800102e:	4602      	mov	r2, r0
 8001030:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <I2C_Init+0x1b0>)
 8001032:	fba3 2302 	umull	r2, r3, r3, r2
 8001036:	0c9b      	lsrs	r3, r3, #18
 8001038:	617b      	str	r3, [r7, #20]
	//have to store the clk value in the FREQ
	tempreg = (tempreg & 0x3F );//clearing other bits expect the 6 FRQ bits
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001040:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR2 |= tempreg ;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]

	tempreg = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]

	//storing the address
	if(pI2CHandle->I2C_Config.slaveADDRmode == I2C_SLAVE_ADDR_MODE_7BITS)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7adb      	ldrb	r3, [r3, #11]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d112      	bne.n	8001084 <I2C_Init+0x8c>
	{
		temp2 &=~(1 << I2C_OAR1_ADDMODE);//to config addressing mode to 7 bit
 800105e:	8a7b      	ldrh	r3, [r7, #18]
 8001060:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001064:	827b      	strh	r3, [r7, #18]
		//for saftey as we only have to store 7 bit address so we mask 7 bits
		temp3 = pI2CHandle->I2C_Config.I2C_DeviceAddress & 0x7F;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a1b      	ldrb	r3, [r3, #8]
 800106a:	b29b      	uxth	r3, r3
 800106c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001070:	81fb      	strh	r3, [r7, #14]
		temp2 |= (temp3 << 1 );
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	b21a      	sxth	r2, r3
 8001078:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800107c:	4313      	orrs	r3, r2
 800107e:	b21b      	sxth	r3, r3
 8001080:	827b      	strh	r3, [r7, #18]
 8001082:	e013      	b.n	80010ac <I2C_Init+0xb4>


	}else if (pI2CHandle->I2C_Config.slaveADDRmode == I2C_SLAVE_ADDR_MODE_10BITS)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7adb      	ldrb	r3, [r3, #11]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10d      	bne.n	80010a8 <I2C_Init+0xb0>
	{
		temp2 |=(1 << I2C_OAR1_ADDMODE);//to config addressing mode to 10 bit
 800108c:	8a7b      	ldrh	r3, [r7, #18]
 800108e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001096:	827b      	strh	r3, [r7, #18]
		temp3 = pI2CHandle->I2C_Config.I2C_DeviceAddress & 0x3FF;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7a1b      	ldrb	r3, [r3, #8]
 800109c:	81fb      	strh	r3, [r7, #14]
		temp2 |= (temp3 << 0 );
 800109e:	8a7a      	ldrh	r2, [r7, #18]
 80010a0:	89fb      	ldrh	r3, [r7, #14]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	827b      	strh	r3, [r7, #18]
 80010a6:	e001      	b.n	80010ac <I2C_Init+0xb4>

	}else
	{
		I2C_ERROR();
 80010a8:	f000 fac9 	bl	800163e <I2C_ERROR>
	}
	temp2 |= (1 << 14);//we have to set 14bit , as per manual
 80010ac:	8a7b      	ldrh	r3, [r7, #18]
 80010ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b2:	827b      	strh	r3, [r7, #18]
	pI2CHandle->pI2Cx->OAR1 = temp2;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	8a7a      	ldrh	r2, [r7, #18]
 80010ba:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	823b      	strh	r3, [r7, #16]
	tempreg = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4a38      	ldr	r2, [pc, #224]	; (80011ac <I2C_Init+0x1b4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d813      	bhi.n	80010f6 <I2C_Init+0xfe>
	{
		//mode is standard mode
		tempreg &= ~(1 << I2C_CCR_FS );
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010d4:	617b      	str	r3, [r7, #20]
		ccr_value = RCC_getPCLK1Value() / (2*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80010d6:	f000 fac1 	bl	800165c <RCC_getPCLK1Value>
 80010da:	4602      	mov	r2, r0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	823b      	strh	r3, [r7, #16]
		tempreg |=(ccr_value & 0xFFF);//masking out rest of the bits as CCR is of 12 bits
 80010e8:	8a3b      	ldrh	r3, [r7, #16]
 80010ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e027      	b.n	8001146 <I2C_Init+0x14e>
	}else
	{
		//mode is fast mode
		tempreg |= (1 << I2C_CCR_FS);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fc:	617b      	str	r3, [r7, #20]
		tempreg |=(pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY );
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a9b      	ldrb	r3, [r3, #10]
 8001102:	039b      	lsls	r3, r3, #14
 8001104:	461a      	mov	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a9b      	ldrb	r3, [r3, #10]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10b      	bne.n	800112c <I2C_Init+0x134>
		{
			ccr_value = RCC_getPCLK1Value() / (3*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001114:	f000 faa2 	bl	800165c <RCC_getPCLK1Value>
 8001118:	4601      	mov	r1, r0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	fbb1 f3f3 	udiv	r3, r1, r3
 8001128:	823b      	strh	r3, [r7, #16]
 800112a:	e00c      	b.n	8001146 <I2C_Init+0x14e>
		}else
		{
			ccr_value = RCC_getPCLK1Value() / (25*pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800112c:	f000 fa96 	bl	800165c <RCC_getPCLK1Value>
 8001130:	4601      	mov	r1, r0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	fbb1 f3f3 	udiv	r3, r1, r3
 8001144:	823b      	strh	r3, [r7, #16]
		}
	}
	tempreg |= (ccr_value & 0xFFF);
 8001146:	8a3b      	ldrh	r3, [r7, #16]
 8001148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4313      	orrs	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	61da      	str	r2, [r3, #28]

	//Trise calculation

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <I2C_Init+0x1b4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d809      	bhi.n	8001178 <I2C_Init+0x180>
	{
		//mode is standard

		tempreg =  (RCC_getPCLK1Value() / 1000000U) + 1; //freqOfPCLK1*Trise
 8001164:	f000 fa7a 	bl	800165c <RCC_getPCLK1Value>
 8001168:	4602      	mov	r2, r0
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <I2C_Init+0x1b0>)
 800116c:	fba3 2302 	umull	r2, r3, r3, r2
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e00d      	b.n	8001194 <I2C_Init+0x19c>
														//Trise for SM mode is 1000ns
	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_getPCLK1Value() * 300 ) / 1000000000U ) + 1; //Trise in Fm mode is 300ns
 8001178:	f000 fa70 	bl	800165c <RCC_getPCLK1Value>
 800117c:	4602      	mov	r2, r0
 800117e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001182:	fb03 f302 	mul.w	r3, r3, r2
 8001186:	0a5b      	lsrs	r3, r3, #9
 8001188:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <I2C_Init+0x1b8>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	09db      	lsrs	r3, r3, #7
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]


	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F); //masking tempreg as ,Trise require 5 bit value
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800119e:	621a      	str	r2, [r3, #32]





}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	000186a0 	.word	0x000186a0
 80011b0:	00044b83 	.word	0x00044b83

080011b4 <I2C_MasterSendData>:
{

}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	70fb      	strb	r3, [r7, #3]
	pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011d0:	601a      	str	r2, [r3, #0]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f9e1 	bl	800159e <I2C_GenerateStartCondition>

	//2.Confirm that start generation is completed by checking the SB flag in the SR1
	//  Note: Until SB is cleared SCL will be stretched(pulled to LOW)
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB )  );
 80011dc:	bf00      	nop
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2101      	movs	r1, #1
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fa16 	bl	8001616 <I2C_GetFlagStatus>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f6      	beq.n	80011de <I2C_MasterSendData+0x2a>

	//3. Send the address of the slave with r/w bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx , SlaveAddr);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f9e0 	bl	80015be <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR ));
 80011fe:	bf00      	nop
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2102      	movs	r1, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fa05 	bl	8001616 <I2C_GetFlagStatus>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f6      	beq.n	8001200 <I2C_MasterSendData+0x4c>

	//5. clear the ADDR flag according to its software sequence
	//  Note: Until ADDR is cleared SCL will be stretched(pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f98c 	bl	8001530 <I2C_ClearADDRFlag>

	//6. send the data until Len becomes 0

	while(Len > 0)
 8001218:	e014      	b.n	8001244 <I2C_MasterSendData+0x90>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 800121a:	bf00      	nop
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f9f7 	bl	8001616 <I2C_GetFlagStatus>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f6      	beq.n	800121c <I2C_MasterSendData+0x68>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
		Len--;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3b01      	subs	r3, #1
 8001242:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e7      	bne.n	800121a <I2C_MasterSendData+0x66>

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the stop condition
	// Note : TxE=1 ,BTF=1, means that both SR and DR are empty and next transmission should begin
	// when BTF=1 SCL will be stretched(pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));
 800124a:	bf00      	nop
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f9df 	bl	8001616 <I2C_GetFlagStatus>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f6      	beq.n	800124c <I2C_MasterSendData+0x98>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 800125e:	bf00      	nop
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f9d5 	bl	8001616 <I2C_GetFlagStatus>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f6      	beq.n	8001260 <I2C_MasterSendData+0xac>


	//8. Generate STOP condition and master need not to wait for the completion of stop condtion
	//	 Note: generating STOP,automatically clearns the BTF

	if(Sr == I2C_DISABLE_SR )
 8001272:	7e3b      	ldrb	r3, [r7, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d104      	bne.n	8001282 <I2C_MasterSendData+0xce>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f947 	bl	8001510 <I2C_GenerateStopCondition>

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	4611      	mov	r1, r2
 8001296:	461a      	mov	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
	pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012ae:	601a      	str	r2, [r3, #0]
	//1. Generate the START condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f972 	bl	800159e <I2C_GenerateStartCondition>
	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//	 NOTE: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( ! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB )  );
 80012ba:	bf00      	nop
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f9a7 	bl	8001616 <I2C_GetFlagStatus>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f6      	beq.n	80012bc <I2C_MasterReceiveData+0x32>

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx , SlaveAddr);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	79ba      	ldrb	r2, [r7, #6]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f987 	bl	80015ea <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR ));
 80012dc:	bf00      	nop
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f996 	bl	8001616 <I2C_GetFlagStatus>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f6      	beq.n	80012de <I2C_MasterReceiveData+0x54>

	//Procedure to read only 1 byte from slave

	if(Len == 0)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <I2C_MasterReceiveData+0x7e>
	{
		I2C_ClearADDRFlag(pI2CHandle);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f91a 	bl	8001530 <I2C_ClearADDRFlag>

		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f905 	bl	8001510 <I2C_GenerateStopCondition>
 8001306:	e0d5      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
	}else if (Len == 1)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10e      	bne.n	800132c <I2C_MasterReceiveData+0xa2>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx , I2C_ACK_DISABLE);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f8df 	bl	80014d8 <I2C_ManageAcking>
		I2C_ClearADDRFlag(pI2CHandle);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f908 	bl	8001530 <I2C_ClearADDRFlag>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8f3 	bl	8001510 <I2C_GenerateStopCondition>
 800132a:	e0c3      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
	}else if (Len == 2)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d111      	bne.n	8001356 <I2C_MasterReceiveData+0xcc>
	{

		I2C_ManageAcking(pI2CHandle->pI2Cx , I2C_ACK_DISABLE);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f8cd 	bl	80014d8 <I2C_ManageAcking>
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_POS);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800134c:	601a      	str	r2, [r3, #0]
		I2C_ClearADDRFlag(pI2CHandle);
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f000 f8ee 	bl	8001530 <I2C_ClearADDRFlag>
 8001354:	e0ae      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>

	}else
	{
		pI2CHandle->pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001364:	601a      	str	r2, [r3, #0]
		I2C_ClearADDRFlag(pI2CHandle);
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f8e2 	bl	8001530 <I2C_ClearADDRFlag>
	}

	while(Len > 0)
 800136c:	e0a2      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
	{
		if(Len <= 3)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b03      	cmp	r3, #3
 8001372:	f200 8089 	bhi.w	8001488 <I2C_MasterReceiveData+0x1fe>
		{
			if(Len == 1)
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d116      	bne.n	80013aa <I2C_MasterReceiveData+0x120>
			{
				//wait until RXNE becomes 1
				while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 800137c:	bf00      	nop
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2140      	movs	r1, #64	; 0x40
 8001384:	4618      	mov	r0, r3
 8001386:	f000 f946 	bl	8001616 <I2C_GetFlagStatus>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f6      	beq.n	800137e <I2C_MasterReceiveData+0xf4>
				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3301      	adds	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
				Len--;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e084      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
			}else if (Len == 2)
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d127      	bne.n	8001400 <I2C_MasterReceiveData+0x176>
			{
				while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 80013b0:	bf00      	nop
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f92c 	bl	8001616 <I2C_GetFlagStatus>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f6      	beq.n	80013b2 <I2C_MasterReceiveData+0x128>
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f8a1 	bl	8001510 <I2C_GenerateStopCondition>

				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
				Len--;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]

				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
				Len--;
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	e059      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
			}else
			{
				/* 3 last bytes*/
				while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8001400:	bf00      	nop
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2104      	movs	r1, #4
 8001408:	4618      	mov	r0, r3
 800140a:	f000 f904 	bl	8001616 <I2C_GetFlagStatus>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f6      	beq.n	8001402 <I2C_MasterReceiveData+0x178>
				I2C_ManageAcking(pI2CHandle->pI2Cx , I2C_ACK_DISABLE);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f85c 	bl	80014d8 <I2C_ManageAcking>
				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3301      	adds	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
				Len--;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3b01      	subs	r3, #1
 8001436:	71fb      	strb	r3, [r7, #7]
				while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));
 8001438:	bf00      	nop
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2104      	movs	r1, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f8e8 	bl	8001616 <I2C_GetFlagStatus>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f6      	beq.n	800143a <I2C_MasterReceiveData+0x1b0>
				I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f85d 	bl	8001510 <I2C_GenerateStopCondition>
				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	3301      	adds	r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
				Len--;
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	3b01      	subs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
				*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	701a      	strb	r2, [r3, #0]

				//increment buffer address
				pRxBuffer++;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3301      	adds	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
				Len--;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	3b01      	subs	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e015      	b.n	80014b4 <I2C_MasterReceiveData+0x22a>
			}
		}else
		{
			while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE));
 8001488:	bf00      	nop
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2140      	movs	r1, #64	; 0x40
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f8c0 	bl	8001616 <I2C_GetFlagStatus>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f6      	beq.n	800148a <I2C_MasterReceiveData+0x200>
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	701a      	strb	r2, [r3, #0]

			//increment buffer address
			pRxBuffer++;
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
			Len--;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
	while(Len > 0)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f af59 	bne.w	800136e <I2C_MasterReceiveData+0xe4>
		}

	}*/

	//re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	7a5b      	ldrb	r3, [r3, #9]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <I2C_MasterReceiveData+0x246>
		I2C_ManageAcking(pI2CHandle->pI2Cx , I2C_ACK_ENABLE);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f804 	bl	80014d8 <I2C_ManageAcking>

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d106      	bne.n	80014f8 <I2C_ManageAcking+0x20>
	{
		//enable the ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
	{
		//disable the ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}

}
 80014f6:	e005      	b.n	8001504 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <I2C_GenerateStopCondition>:




void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	601a      	str	r2, [r3, #0]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01f      	beq.n	8001586 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d112      	bne.n	8001574 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d11f      	bne.n	8001596 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ffbb 	bl	80014d8 <I2C_ManageAcking>


				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 8001572:	e010      	b.n	8001596 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	60fb      	str	r3, [r7, #12]
}
 8001584:	e007      	b.n	8001596 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	60fb      	str	r3, [r7, #12]
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <I2C_GenerateStartCondition>:
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <I2C_ExecuteAddressPhaseWrite>:


static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx , uint8_t SlaveAddr)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]
	//Note: Address is of 7 bits and 1 bit for read/write , 0th bit is read/write bit
	SlaveAddr = SlaveAddr << 1; //leftShifing  address by 1 bit to make space for read right bit
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //for writing, indicates transmission
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr ;//loading address pase in data register for transmitting
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]

}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx , uint8_t SlaveAddr)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
	//Note: Address is of 7 bits and 1 bit for read/write , 0th bit is read/write bit
	SlaveAddr = SlaveAddr << 1; //leftShifing  address by 1 bit to make space for read right bit
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1 << 0); //for reading, indicates transmission
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr ;//loading address pase in data register for transmitting
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	611a      	str	r2, [r3, #16]

}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <I2C_GetFlagStatus>:
			pI2Cx->CR2 &= ~( 1 << I2C_CR2_ITERREN);
	 }

}
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <I2C_ERROR>:
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2C)
{
    return (uint8_t) pI2C->DR;
}
void I2C_ERROR()
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <RCC__GetPLLOutputClock>:
 * 2)check what is the value of the system prescaler
 * 3)check the value of prescaler of   APBx bus on which it is connected
 * 4)then we get the value of clk to the I2C
 */
uint32_t RCC__GetPLLOutputClock()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	return 0;
 8001650:	2300      	movs	r3, #0

}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <RCC_getPCLK1Value>:
uint16_t AHB_PreScaler [8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScalar[4] = {2,4,8,16};

//this is a generic function to calculate the value of pclk1 i.e APB1 clk
uint32_t RCC_getPCLK1Value(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
	uint32_t  SystemClk ;
	uint32_t pclk1;
	//here bring bits 2and 3 to 0th and 1st position , by right shifing the 2 bits then masking other bits
	//using ' & 'then storing the value we got in the variable

	clksrc = (RCC->CFGR >>2) & 0x3;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <RCC_getPCLK1Value+0x9c>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	60fb      	str	r3, [r7, #12]

	if(clksrc == 0)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <RCC_getPCLK1Value+0x1e>
	{
		//sclk sourse is HSI which is 16MHz
		SystemClk = 16000000;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <RCC_getPCLK1Value+0xa0>)
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e00b      	b.n	8001692 <RCC_getPCLK1Value+0x36>
	}else if(clksrc == 1)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <RCC_getPCLK1Value+0x2a>
	{
		//sclk source is HSE which is 8MHZ
		SystemClk = 8000000;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <RCC_getPCLK1Value+0xa4>)
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	e005      	b.n	8001692 <RCC_getPCLK1Value+0x36>
	}else if(clksrc == 2)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d102      	bne.n	8001692 <RCC_getPCLK1Value+0x36>
	{
		//clksrc source is Pll
		SystemClk = RCC__GetPLLOutputClock();
 800168c:	f7ff ffde 	bl	800164c <RCC__GetPLLOutputClock>
 8001690:	6138      	str	r0, [r7, #16]
	}

	//finding the value of AHB prescaler

	temp = (RCC->CFGR >> 4) & 0xF;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <RCC_getPCLK1Value+0x9c>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	72fb      	strb	r3, [r7, #11]

	if(temp <8)
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	2b07      	cmp	r3, #7
 80016a4:	d802      	bhi.n	80016ac <RCC_getPCLK1Value+0x50>
	{
		//as for values less than 8 prescaller is 1
		ahbp = 1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
 80016aa:	e005      	b.n	80016b8 <RCC_getPCLK1Value+0x5c>
	}else
	{
		//doing  -8 as first 8 values of temp are not included in the arry
		//they are in the previous function
		ahbp = AHB_PreScaler[temp - 8];
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	3b08      	subs	r3, #8
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <RCC_getPCLK1Value+0xa8>)
 80016b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b6:	75fb      	strb	r3, [r7, #23]


	//finding values of APB1 prescaler
	//for the we have to refer RCC_CFGR 's 10th bit field

	temp = (RCC->CFGR >> 10) & 0x7;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <RCC_getPCLK1Value+0x9c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	0a9b      	lsrs	r3, r3, #10
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	72fb      	strb	r3, [r7, #11]

	if(temp < 4)
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d802      	bhi.n	80016d2 <RCC_getPCLK1Value+0x76>
	{
		//as for values less than 4 prescaller is 1
		apb1p = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	75bb      	strb	r3, [r7, #22]
 80016d0:	e005      	b.n	80016de <RCC_getPCLK1Value+0x82>
	}else
	{
		//doing  -4 as first 4 values of temp are not included in the arry
		//they are in the previous function
		apb1p =APB1_PreScalar[temp - 4];
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	3b04      	subs	r3, #4
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <RCC_getPCLK1Value+0xac>)
 80016d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016dc:	75bb      	strb	r3, [r7, #22]
	}

	pclk1 = ( (SystemClk / ahbp ) / apb1p );
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80016e6:	7dbb      	ldrb	r3, [r7, #22]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	607b      	str	r3, [r7, #4]

	return pclk1;
 80016ee:	687b      	ldr	r3, [r7, #4]

}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	007a1200 	.word	0x007a1200
 8001704:	20000000 	.word	0x20000000
 8001708:	20000010 	.word	0x20000010

0800170c <GPIO_PeriClockControl>:
 *
 *****************************************************************/


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx , uint8_t EnorDi)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
	if( EnorDi == ENABLE )
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d157      	bne.n	80017ce <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a59      	ldr	r2, [pc, #356]	; (8001888 <GPIO_PeriClockControl+0x17c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d106      	bne.n	8001734 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8001726:	4b59      	ldr	r3, [pc, #356]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a58      	ldr	r2, [pc, #352]	; (800188c <GPIO_PeriClockControl+0x180>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DI();
		}

	}
}
 8001732:	e0a3      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a56      	ldr	r2, [pc, #344]	; (8001890 <GPIO_PeriClockControl+0x184>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d106      	bne.n	800174a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <GPIO_PeriClockControl+0x180>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a52      	ldr	r2, [pc, #328]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001748:	e098      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <GPIO_PeriClockControl+0x188>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d106      	bne.n	8001760 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a4d      	ldr	r2, [pc, #308]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800175e:	e08d      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <GPIO_PeriClockControl+0x18c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d106      	bne.n	8001776 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001768:	4b48      	ldr	r3, [pc, #288]	; (800188c <GPIO_PeriClockControl+0x180>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a47      	ldr	r2, [pc, #284]	; (800188c <GPIO_PeriClockControl+0x180>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001774:	e082      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <GPIO_PeriClockControl+0x190>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d106      	bne.n	800178c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a42      	ldr	r2, [pc, #264]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
}
 800178a:	e077      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <GPIO_PeriClockControl+0x194>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d106      	bne.n	80017a2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	4a3c      	ldr	r2, [pc, #240]	; (800188c <GPIO_PeriClockControl+0x180>)
 800179a:	f043 0320 	orr.w	r3, r3, #32
 800179e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017a0:	e06c      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a3f      	ldr	r2, [pc, #252]	; (80018a4 <GPIO_PeriClockControl+0x198>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d106      	bne.n	80017b8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a37      	ldr	r2, [pc, #220]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017b6:	e061      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <GPIO_PeriClockControl+0x19c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d15d      	bne.n	800187c <GPIO_PeriClockControl+0x170>
			GPIOI_PCLK_EN();
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	4a31      	ldr	r2, [pc, #196]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017cc:	e056      	b.n	800187c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a2d      	ldr	r2, [pc, #180]	; (8001888 <GPIO_PeriClockControl+0x17c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d106      	bne.n	80017e4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a2c      	ldr	r2, [pc, #176]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017e2:	e04b      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <GPIO_PeriClockControl+0x184>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d106      	bne.n	80017fa <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <GPIO_PeriClockControl+0x180>)
 80017f2:	f023 0302 	bic.w	r3, r3, #2
 80017f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80017f8:	e040      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <GPIO_PeriClockControl+0x188>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d106      	bne.n	8001810 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800180e:	e035      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <GPIO_PeriClockControl+0x18c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d106      	bne.n	8001826 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <GPIO_PeriClockControl+0x180>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <GPIO_PeriClockControl+0x180>)
 800181e:	f023 0308 	bic.w	r3, r3, #8
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001824:	e02a      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <GPIO_PeriClockControl+0x190>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d106      	bne.n	800183c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001834:	f023 0310 	bic.w	r3, r3, #16
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
}
 800183a:	e01f      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <GPIO_PeriClockControl+0x194>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d106      	bne.n	8001852 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <GPIO_PeriClockControl+0x180>)
 800184a:	f023 0320 	bic.w	r3, r3, #32
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001850:	e014      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <GPIO_PeriClockControl+0x198>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d106      	bne.n	8001868 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <GPIO_PeriClockControl+0x180>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001866:	e009      	b.n	800187c <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <GPIO_PeriClockControl+0x19c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d105      	bne.n	800187c <GPIO_PeriClockControl+0x170>
			GPIOI_PCLK_DI();
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <GPIO_PeriClockControl+0x180>)
 8001876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40020000 	.word	0x40020000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021000 	.word	0x40021000
 80018a0:	40021400 	.word	0x40021400
 80018a4:	40021800 	.word	0x40021800
 80018a8:	40022000 	.word	0x40022000

080018ac <GPIO_Init>:
 *@note2		  correctly.
 *****************************************************************/


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
	//1. Configure the Mode of GPIO pin

	if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	795b      	ldrb	r3, [r3, #5]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d820      	bhi.n	8001902 <GPIO_Init+0x56>
	{
		// when non interrupt mode
		temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	461a      	mov	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	791b      	ldrb	r3, [r3, #4]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<(2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber )); // clearing bits
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2103      	movs	r1, #3
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->MODER |= temp; // to store pin mode value in the appropriate register we use OR so
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e0d2      	b.n	8001aa8 <GPIO_Init+0x1fc>

	}else
	{
		// when interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d117      	bne.n	800193a <GPIO_Init+0x8e>
		{
			//1.CONFIGURE FTSR

			EXTI ->FTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <GPIO_Init+0x18c>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	7912      	ldrb	r2, [r2, #4]
 8001912:	4611      	mov	r1, r2
 8001914:	2201      	movs	r2, #1
 8001916:	408a      	lsls	r2, r1
 8001918:	4611      	mov	r1, r2
 800191a:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <GPIO_Init+0x18c>)
 800191c:	430b      	orrs	r3, r1
 800191e:	60d3      	str	r3, [r2, #12]
			//WE are clearing the RTSR bit as we only want falling edge detection
			EXTI->RTSR &=~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001920:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <GPIO_Init+0x18c>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	7912      	ldrb	r2, [r2, #4]
 8001928:	4611      	mov	r1, r2
 800192a:	2201      	movs	r2, #1
 800192c:	408a      	lsls	r2, r1
 800192e:	43d2      	mvns	r2, r2
 8001930:	4611      	mov	r1, r2
 8001932:	4a41      	ldr	r2, [pc, #260]	; (8001a38 <GPIO_Init+0x18c>)
 8001934:	400b      	ands	r3, r1
 8001936:	6093      	str	r3, [r2, #8]
 8001938:	e035      	b.n	80019a6 <GPIO_Init+0xfa>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d117      	bne.n	8001972 <GPIO_Init+0xc6>
		{
			//1.configure RTSR

			EXTI ->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <GPIO_Init+0x18c>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	7912      	ldrb	r2, [r2, #4]
 800194a:	4611      	mov	r1, r2
 800194c:	2201      	movs	r2, #1
 800194e:	408a      	lsls	r2, r1
 8001950:	4611      	mov	r1, r2
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <GPIO_Init+0x18c>)
 8001954:	430b      	orrs	r3, r1
 8001956:	6093      	str	r3, [r2, #8]
			//WE are clearing the FTSR bit as we only want rising edge detection
			EXTI->FTSR  &=~( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <GPIO_Init+0x18c>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	7912      	ldrb	r2, [r2, #4]
 8001960:	4611      	mov	r1, r2
 8001962:	2201      	movs	r2, #1
 8001964:	408a      	lsls	r2, r1
 8001966:	43d2      	mvns	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <GPIO_Init+0x18c>)
 800196c:	400b      	ands	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]
 8001970:	e019      	b.n	80019a6 <GPIO_Init+0xfa>


		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	795b      	ldrb	r3, [r3, #5]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d115      	bne.n	80019a6 <GPIO_Init+0xfa>
		{
			//1.configure BOTH RTSR AND FTSR as we want both rising edge and
			//falling edge detection
			EXTI ->RTSR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <GPIO_Init+0x18c>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	7912      	ldrb	r2, [r2, #4]
 8001982:	4611      	mov	r1, r2
 8001984:	2201      	movs	r2, #1
 8001986:	408a      	lsls	r2, r1
 8001988:	4611      	mov	r1, r2
 800198a:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <GPIO_Init+0x18c>)
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]

			EXTI->FTSR  |=( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <GPIO_Init+0x18c>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	7912      	ldrb	r2, [r2, #4]
 8001998:	4611      	mov	r1, r2
 800199a:	2201      	movs	r2, #1
 800199c:	408a      	lsls	r2, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <GPIO_Init+0x18c>)
 80019a2:	430b      	orrs	r3, r1
 80019a4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	791b      	ldrb	r3, [r3, #4]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4 ;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);//to return code used function not macro
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <GPIO_Init+0x190>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d04e      	beq.n	8001a60 <GPIO_Init+0x1b4>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <GPIO_Init+0x194>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d032      	beq.n	8001a32 <GPIO_Init+0x186>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <GPIO_Init+0x198>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d02b      	beq.n	8001a2e <GPIO_Init+0x182>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <GPIO_Init+0x19c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d024      	beq.n	8001a2a <GPIO_Init+0x17e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <GPIO_Init+0x1a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01d      	beq.n	8001a26 <GPIO_Init+0x17a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <GPIO_Init+0x1a4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d016      	beq.n	8001a22 <GPIO_Init+0x176>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <GPIO_Init+0x1a8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00f      	beq.n	8001a1e <GPIO_Init+0x172>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <GPIO_Init+0x1ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d008      	beq.n	8001a1a <GPIO_Init+0x16e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <GPIO_Init+0x1b0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <GPIO_Init+0x16a>
 8001a12:	2308      	movs	r3, #8
 8001a14:	e025      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a16:	2300      	movs	r3, #0
 8001a18:	e023      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e021      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a1e:	2306      	movs	r3, #6
 8001a20:	e01f      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e01d      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e01b      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e019      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e017      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e015      	b.n	8001a62 <GPIO_Init+0x1b6>
 8001a36:	bf00      	nop
 8001a38:	40013c00 	.word	0x40013c00
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40021c00 	.word	0x40021c00
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	2300      	movs	r3, #0
 8001a62:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001a64:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <GPIO_Init+0x34c>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <GPIO_Init+0x34c>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portcode <<(temp2 *4);
 8001a70:	4a62      	ldr	r2, [pc, #392]	; (8001bfc <GPIO_Init+0x350>)
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	3302      	adds	r3, #2
 8001a76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a7a:	7c79      	ldrb	r1, [r7, #17]
 8001a7c:	7cbb      	ldrb	r3, [r7, #18]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	495d      	ldr	r1, [pc, #372]	; (8001bfc <GPIO_Init+0x350>)
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	4302      	orrs	r2, r0
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the exti interrupt delivery using IMR

		EXTI->IMR |= ( 1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001a92:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <GPIO_Init+0x354>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	7912      	ldrb	r2, [r2, #4]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	408a      	lsls	r2, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4a57      	ldr	r2, [pc, #348]	; (8001c00 <GPIO_Init+0x354>)
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6013      	str	r3, [r2, #0]


	}

	temp = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	799b      	ldrb	r3, [r3, #6]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber )); // clearing bits
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	791b      	ldrb	r3, [r3, #4]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2103      	movs	r1, #3
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]

	temp = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	79db      	ldrb	r3, [r3, #7]
 8001af4:	461a      	mov	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	791b      	ldrb	r3, [r3, #4]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2* pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) );
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2103      	movs	r1, #3
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4619      	mov	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

	//4. Configure the OutType

	temp = (pGPIOHandle ->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber) );
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7a1b      	ldrb	r3, [r3, #8]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	791b      	ldrb	r3, [r3, #4]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	791b      	ldrb	r3, [r3, #4]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	408b      	lsls	r3, r1
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

	//5. Configure the AltFunction
	if (pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUN)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d136      	bne.n	8001bea <GPIO_Init+0x33e>
	{
		// to configure alternate function
		uint32_t temp1 = 0 ;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
		uint32_t temp2 = 0 ;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]

		temp1 = ((pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) / 8 ); // for AF0 or AF1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	791b      	ldrb	r3, [r3, #4]
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	60fb      	str	r3, [r7, #12]
		temp2 = ((pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber ) % 8 ); // for selecting bits of AF
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60bb      	str	r3, [r7, #8]

		pGPIOHandle ->pGPIOx->AFR[temp1] &= ~(0xF  << (4*temp2) );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	210f      	movs	r1, #15
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4011      	ands	r1, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle ->pGPIOx->AFR[temp1] |= (pGPIOHandle ->GPIO_PinConfig.GPIO_PinAlFunMode  << (4*temp2) );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7a5b      	ldrb	r3, [r3, #9]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4311      	orrs	r1, r2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	}

}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40013c00 	.word	0x40013c00

08001c04 <GPIO_ReadFromInputPin>:
 * @Note		- None
 *
 *****************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t )((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]

	return value;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <GPIO_WriteToOutputPin>:
 * @Note		- None
 *
 *****************************************************************/

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) // void as it is write
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001c40:	78bb      	ldrb	r3, [r7, #2]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d109      	bne.n	8001c5a <GPIO_WriteToOutputPin+0x2a>
		{
			/* Write 1 to the output data register at the bit field corresponding to the pin number */
			pGPIOx->ODR |= ( 1 << PinNumber );//set pin
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
		else
		{
			/* Write 0 to the output data register at the bit field corresponding to the pin number */
			pGPIOx->ODR &= ~( 1 << PinNumber );	//Clear pin
		}
}
 8001c58:	e009      	b.n	8001c6e <GPIO_WriteToOutputPin+0x3e>
			pGPIOx->ODR &= ~( 1 << PinNumber );	//Clear pin
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	43d2      	mvns	r2, r2
 8001c68:	401a      	ands	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	615a      	str	r2, [r3, #20]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <__libc_init_array>:
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	4e0d      	ldr	r6, [pc, #52]	; (8001cb4 <__libc_init_array+0x38>)
 8001c80:	4c0d      	ldr	r4, [pc, #52]	; (8001cb8 <__libc_init_array+0x3c>)
 8001c82:	1ba4      	subs	r4, r4, r6
 8001c84:	10a4      	asrs	r4, r4, #2
 8001c86:	2500      	movs	r5, #0
 8001c88:	42a5      	cmp	r5, r4
 8001c8a:	d109      	bne.n	8001ca0 <__libc_init_array+0x24>
 8001c8c:	4e0b      	ldr	r6, [pc, #44]	; (8001cbc <__libc_init_array+0x40>)
 8001c8e:	4c0c      	ldr	r4, [pc, #48]	; (8001cc0 <__libc_init_array+0x44>)
 8001c90:	f000 f818 	bl	8001cc4 <_init>
 8001c94:	1ba4      	subs	r4, r4, r6
 8001c96:	10a4      	asrs	r4, r4, #2
 8001c98:	2500      	movs	r5, #0
 8001c9a:	42a5      	cmp	r5, r4
 8001c9c:	d105      	bne.n	8001caa <__libc_init_array+0x2e>
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca4:	4798      	blx	r3
 8001ca6:	3501      	adds	r5, #1
 8001ca8:	e7ee      	b.n	8001c88 <__libc_init_array+0xc>
 8001caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cae:	4798      	blx	r3
 8001cb0:	3501      	adds	r5, #1
 8001cb2:	e7f2      	b.n	8001c9a <__libc_init_array+0x1e>
 8001cb4:	08001cf4 	.word	0x08001cf4
 8001cb8:	08001cf4 	.word	0x08001cf4
 8001cbc:	08001cf4 	.word	0x08001cf4
 8001cc0:	08001cf8 	.word	0x08001cf8

08001cc4 <_init>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	bf00      	nop
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr

08001cd0 <_fini>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	bf00      	nop
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr
